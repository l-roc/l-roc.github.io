<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Roc&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l-roc.github.io/"/>
  <updated>2020-10-02T08:15:54.036Z</updated>
  <id>https://l-roc.github.io/</id>
  
  <author>
    <name>Roc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 771.宝石与石头</title>
    <link href="https://l-roc.github.io/2020/10/02/leetcode-771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/"/>
    <id>https://l-roc.github.io/2020/10/02/leetcode-771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/</id>
    <published>2020-10-02T08:03:47.000Z</published>
    <updated>2020-10-02T08:15:54.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-771-宝石与石头"><a href="#leetcode-771-宝石与石头" class="headerlink" title="leetcode 771.宝石与石头"></a>leetcode 771.宝石与石头</h1><p> 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。<br> J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/jewels-and-stones" target="_blank" rel="noopener">leecode 771</a></p><p>示例 1:</p><blockquote><p>输入: J = “aA”, S = “aAAbbbb”<br>输出: 3</p></blockquote><p>示例 2:</p><blockquote><p>输入: J = “z”, S = “ZZ”<br>输出: 0</p></blockquote><p>注意:</p><blockquote><p>S 和 J 最多含有50个字母。<br>J 中的字符不重复。</p></blockquote><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief leetcode-771-宝石与石头</span></span><br><span class="line"><span class="comment">     * @param J 石头中宝石的类型    eg:"aA"</span></span><br><span class="line"><span class="comment">     * @param S 拥有的石头   eg:"aAAbbbb"</span></span><br><span class="line"><span class="comment">     * @return 拥有的石头中为宝石的数目 eg:3 (aAA总共三个宝石）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; hashSet;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:J) &#123;</span><br><span class="line">            hashSet.insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:S) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashSet.<span class="built_in">find</span>(i) != hashSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> J=<span class="string">"aA"</span>;</span><br><span class="line">    <span class="built_in">string</span> S=<span class="string">"aAAbbbb"</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution.numJewelsInStones(J,S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode-771-宝石与石头&quot;&gt;&lt;a href=&quot;#leetcode-771-宝石与石头&quot; class=&quot;headerlink&quot; title=&quot;leetcode 771.宝石与石头&quot;&gt;&lt;/a&gt;leetcode 771.宝石与石头&lt;/h1&gt;&lt;p&gt; 给定字符串
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode LCP19.秋叶收藏集</title>
    <link href="https://l-roc.github.io/2020/10/01/leetcode-LCP19-%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86/"/>
    <id>https://l-roc.github.io/2020/10/01/leetcode-LCP19-%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86/</id>
    <published>2020-10-01T14:27:33.000Z</published>
    <updated>2020-10-01T16:44:58.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-LCP19-秋叶收藏集"><a href="#leetcode-LCP19-秋叶收藏集" class="headerlink" title="leetcode LCP19.秋叶收藏集"></a>leetcode LCP19.秋叶收藏集</h1><p>​        小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。</p><p>​        出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/UlBDOe" target="_blank" rel="noopener">leetcode LCP19</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief LCP 19.秋叶收藏集  时间复杂度：O(n)  空间复杂度：O(n)</span></span><br><span class="line"><span class="comment">     * @param leaves eg:"rrryyyrryyyrr" r:代表红叶 y：代表黄叶</span></span><br><span class="line"><span class="comment">     * @return eg:2 将中间两个rr替换为y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumOperations</span><span class="params">(<span class="built_in">string</span> leaves)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(leaves.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = (leaves[<span class="number">0</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">0</span>] + (leaves[<span class="number">1</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">0</span>] + (leaves[<span class="number">1</span>] == <span class="string">'r'</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">2</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">0</span>] + (leaves[<span class="number">2</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>], dp[<span class="number">1</span>][<span class="number">1</span>]) + (leaves[<span class="number">2</span>] == <span class="string">'r'</span>);</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">2</span>] = dp[<span class="number">1</span>][<span class="number">1</span>] + (leaves[<span class="number">2</span>] == <span class="string">'y'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; leaves.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + (leaves[i] == <span class="string">'r'</span>);</span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[leaves.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 同minimumOperations函数，通过降维优化了空间复杂度     时间复杂度：O(n)  空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">     * @param leaves</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumOperations1</span><span class="params">(<span class="built_in">string</span> leaves)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>]= (leaves[<span class="number">0</span>]==<span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">1</span>]=INT_MAX;</span><br><span class="line">        dp[<span class="number">2</span>]=INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; leaves.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">1</span>)</span><br><span class="line">                dp[<span class="number">2</span>] = <span class="built_in">min</span>(dp[<span class="number">1</span>], dp[<span class="number">2</span>]) + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">min</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]) + (leaves[i] == <span class="string">'r'</span>);</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">0</span>] + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> leaves = <span class="string">"rrryyyrryyyrr"</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution.minimumOperations(leaves);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-LCP19-秋叶收藏集&quot;&gt;&lt;a href=&quot;#leetcode-LCP19-秋叶收藏集&quot; class=&quot;headerlink&quot; title=&quot;leetcode LCP19.秋叶收藏集&quot;&gt;&lt;/a&gt;leetcode LCP19.秋叶收藏集&lt;/h1&gt;&lt;p&gt;​        小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。&lt;/p&gt;
&lt;p&gt;​        出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/UlBDOe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode LCP19&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 145.二叉树的后序遍历（非递归）</title>
    <link href="https://l-roc.github.io/2020/09/29/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>https://l-roc.github.io/2020/09/29/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</id>
    <published>2020-09-29T15:37:52.000Z</published>
    <updated>2020-09-29T15:41:44.483Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 二叉树递归后序遍历</span></span><br><span class="line"><span class="comment">     * @param root 二叉树根结点</span></span><br><span class="line"><span class="comment">     * @return 遍历结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal1(TreeNode *root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            postorderTraversal1(root-&gt;left);</span><br><span class="line">            postorderTraversal1(root-&gt;right);</span><br><span class="line">            result.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 二叉树非递归后序遍历</span></span><br><span class="line"><span class="comment">     * @param root 二叉树根结点指针</span></span><br><span class="line"><span class="comment">     * @return  后序遍历结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal2(TreeNode *root) &#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        TreeNode *pre;</span><br><span class="line">        result.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123; st.push(root); &#125;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            <span class="keyword">if</span> ((cur-&gt;left == <span class="literal">nullptr</span> &amp;&amp; cur-&gt;right == <span class="literal">nullptr</span>) ||</span><br><span class="line">                pre == cur-&gt;left || pre == cur-&gt;right) &#123;</span><br><span class="line">                <span class="comment">// 当前结点没有左右子结点</span></span><br><span class="line">                <span class="comment">// 上一个遍历的结点为当前结点的左或右子结点（即当前结点表示当前结点，并不代表树）</span></span><br><span class="line">                result.push_back(cur-&gt;val);</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当前结点有左或右结点 而且上一个遍历的结点并不是当前结点的子结点（即当前结点表示以当前结点为根结点的树）</span></span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">                    st.push(cur-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">                    st.push(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 通过层序遍历创建二叉树</span></span><br><span class="line"><span class="comment"> * @param nums 层序遍历结果，-1表示结点为空，最后的-1可以去除 eg：&#123;1,-1,3,2,-1&#125;可以写为&#123;1,-1,3,2&#125;</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;TreeNode *&gt; qu;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">    TreeNode *cur = <span class="literal">nullptr</span>;</span><br><span class="line">    qu.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!qu.empty() &amp;&amp; i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        cur = qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;left = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">                qu.push(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;right = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">                qu.push(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    TreeNode *root = buildTree(nums);</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.postorderTraversal2(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
      <category term="leecode" scheme="https://l-roc.github.io/tags/leecode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 235.二叉搜索树的最近公共祖先</title>
    <link href="https://l-roc.github.io/2020/09/27/leetcode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://l-roc.github.io/2020/09/27/leetcode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2020-09-27T07:39:31.000Z</published>
    <updated>2020-09-27T07:55:55.428Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 在二叉搜索树中查找两个结点的最近公共祖先（所有的结点的值都是唯一的，p和q为不同结点并且都存在二叉树中）</span></span><br><span class="line"><span class="comment">     * @param root 二叉树搜索树根结点</span></span><br><span class="line"><span class="comment">     * @param p 结点1</span></span><br><span class="line"><span class="comment">     * @param q 结点2</span></span><br><span class="line"><span class="comment">     * @return 最近公共祖先</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">lowestCommonAncestor</span><span class="params">(TreeNode *root, TreeNode *p, TreeNode *q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) &#123;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) &#123;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTreeHelper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.<span class="built_in">size</span>() || nums[index] == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(nums[index]);</span><br><span class="line">    root-&gt;left = buildTreeHelper(nums, index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    root-&gt;right = buildTreeHelper(nums, index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> buildTreeHelper(nums, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    TreeNode *root = buildTree(nums);</span><br><span class="line">    TreeNode *p = root-&gt;left;</span><br><span class="line">    TreeNode *q = p-&gt;right;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.lowestCommonAncestor(root, p, q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result-&gt;val;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
      <category term="leecode" scheme="https://l-roc.github.io/tags/leecode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 106.从中序与后序遍历构造二叉树</title>
    <link href="https://l-roc.github.io/2020/09/26/leetcode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://l-roc.github.io/2020/09/26/leetcode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-09-25T16:27:16.000Z</published>
    <updated>2020-09-25T16:54:44.905Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 用于递归的辅助函数</span></span><br><span class="line"><span class="comment">     * @param inorder 前序遍历数组</span></span><br><span class="line"><span class="comment">     * @param i 前序遍历开始的下标</span></span><br><span class="line"><span class="comment">     * @param postorder 中序遍历数组</span></span><br><span class="line"><span class="comment">     * @param j 中序遍历开始下标</span></span><br><span class="line"><span class="comment">     * @param n 总共结点数</span></span><br><span class="line"><span class="comment">     * @return 返回构建二叉树的根结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;postorder, <span class="keyword">int</span> j, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || j + n - <span class="number">1</span> &lt; <span class="number">0</span> || j + n - <span class="number">1</span> &gt;= inorder.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">int</span> rootVal = postorder[j + n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">        <span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">while</span> (inorder[k] != rootVal) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = helper(inorder, i, postorder, j, k - i);</span><br><span class="line">        root-&gt;right = helper(inorder, k + <span class="number">1</span>, postorder, j + k - i, n - (k - i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 根据前序和中序遍历结果构造二叉树</span></span><br><span class="line"><span class="comment">     * @param inorder 前序遍历</span></span><br><span class="line"><span class="comment">     * @param postorder 中序遍历</span></span><br><span class="line"><span class="comment">     * @return 构造的二叉树根结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(inorder, <span class="number">0</span>, postorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 前序遍历</span></span><br><span class="line"><span class="comment"> * @param root 二叉树根结点</span></span><br><span class="line"><span class="comment"> * @param result 前序遍历结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;left, result);</span><br><span class="line">    result.push_back(root-&gt;val);</span><br><span class="line">    inOrder(root-&gt;right, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorder&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorder&#123;<span class="number">9</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    Solution solution;</span><br><span class="line">    TreeNode *root = solution.buildTree(inorder, postorder);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    inOrder(root, result);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java中的Object类</title>
    <link href="https://l-roc.github.io/2020/09/23/Object%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>https://l-roc.github.io/2020/09/23/Object%E7%B1%BB%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-22T16:15:00.178Z</published>
    <updated>2020-09-22T16:43:02.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-getClass"><a href="#1-getClass" class="headerlink" title="1.getClass()"></a>1.getClass()</h1><pre><code>public finalreturn:Class&lt;?&gt;</code></pre><h1 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2.hashCode()"></a>2.hashCode()</h1><pre><code>publicreturn:int</code></pre><h1 id="3-equals-Object-obj"><a href="#3-equals-Object-obj" class="headerlink" title="3.equals(Object obj)"></a>3.equals(Object obj)</h1><pre><code>publicreturn:boolean</code></pre><h1 id="4-clone"><a href="#4-clone" class="headerlink" title="4.clone()"></a>4.clone()</h1><pre><code>protectedthrows:CloneNotSupportedExceptionreturn:Object</code></pre><h1 id="5-toString"><a href="#5-toString" class="headerlink" title="5.toString()"></a>5.toString()</h1><pre><code>publicreturn:String</code></pre><h1 id="6-notify"><a href="#6-notify" class="headerlink" title="6.notify()"></a>6.notify()</h1><pre><code>public finalreturn:void</code></pre><h1 id="7-notifyAll"><a href="#7-notifyAll" class="headerlink" title="7.notifyAll()"></a>7.notifyAll()</h1><pre><code>public finalreturn:void</code></pre><h1 id="8-wait"><a href="#8-wait" class="headerlink" title="8.wait()"></a>8.wait()</h1><pre><code>public finalreturn:voidthrows:InterruptedException </code></pre><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-getClass&quot;&gt;&lt;a href=&quot;#1-getClass&quot; class=&quot;headerlink&quot; title=&quot;1.getClass()&quot;&gt;&lt;/a&gt;1.getClass()&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;public final
return:Class&amp;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://l-roc.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="https://l-roc.github.io/2019/12/28/test/"/>
    <id>https://l-roc.github.io/2019/12/28/test/</id>
    <published>2019-12-28T15:36:12.718Z</published>
    <updated>2019-12-28T15:36:12.718Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test docment.</p><a id="more"></a><h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><h2 id="a-url-roc’s-github"><a href="#a-url-roc’s-github" class="headerlink" title="a url roc’s github"></a>a url <a href="https://github.com/l-roc" target="_blank" rel="noopener">roc’s github</a></h2><p>test test<br>test</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a test docment.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="test" scheme="https://l-roc.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://l-roc.github.io/2019/11/14/hello-world/"/>
    <id>https://l-roc.github.io/2019/11/14/hello-world/</id>
    <published>2019-11-14T09:07:21.179Z</published>
    <updated>2019-11-14T09:07:21.179Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hello world!" scheme="https://l-roc.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
