<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Roc&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l-roc.github.io/"/>
  <updated>2020-10-27T07:14:43.357Z</updated>
  <id>https://l-roc.github.io/</id>
  
  <author>
    <name>Roc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 1365.有多少小于当前数字的数字</title>
    <link href="https://l-roc.github.io/2020/10/27/leetcode-1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://l-roc.github.io/2020/10/27/leetcode-1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-10-27T00:48:46.000Z</published>
    <updated>2020-10-27T07:14:43.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1365-有多少小于当前数字的数字"><a href="#1365-有多少小于当前数字的数字" class="headerlink" title="1365.有多少小于当前数字的数字"></a>1365.有多少小于当前数字的数字</h1><p>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] &lt; nums[i] 。以数组形式返回答案。</p><p>示例 1：</p><blockquote><p>输入：nums = [8,1,2,2,3]<br>输出：[4,0,1,1,3]<br>解释：<br>对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。<br>对于 nums[1]=1 不存在比它小的数字。<br>对于 nums[2]=2 存在一个比它小的数字：（1）。<br>对于 nums[3]=2 存在一个比它小的数字：（1）。<br>对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。</p></blockquote><a id="more"></a><p>示例 2：</p><blockquote><p>输入：nums = [6,5,4,8]<br>输出：[2,1,0,3]</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [7,7,7,7]<br>输出：[0,0,0,0]</p></blockquote><p>提示：</p><blockquote><p>2 &lt;= nums.length &lt;= 500<br>0 &lt;= nums[i] &lt;= 100</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number" target="_blank" rel="noopener">leetcode 1365</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 对数组每个元素，统计比其小的所有数字的数目 时间复杂度:O(NlogN) 空间复杂度:O(N)</span></span><br><span class="line"><span class="comment">     * @param nums</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; data;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(nums.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        data.reserve(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            data.emplace_back(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; data[i].first != data[i - <span class="number">1</span>].first) &#123;</span><br><span class="line">                pre = i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result[data[i].second] = pre + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 同smallerNumbersThanCurrent，由于其中的数字都为0&lt;=nums[i]&lt;=100,所以使用基数排序代替快速排序对其优化 时间复杂度:O(N+K) 空间复杂度:O(K)</span></span><br><span class="line"><span class="comment">     * @param nums</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent1(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">101</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        result.reserve(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;num:nums) &#123;</span><br><span class="line">            cnt[num] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;num:nums) &#123;</span><br><span class="line">            result.emplace_back(num == <span class="number">0</span> ? <span class="number">0</span> : cnt[num - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result = solution.smallerNumbersThanCurrent1(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1365-有多少小于当前数字的数字&quot;&gt;&lt;a href=&quot;#1365-有多少小于当前数字的数字&quot; class=&quot;headerlink&quot; title=&quot;1365.有多少小于当前数字的数字&quot;&gt;&lt;/a&gt;1365.有多少小于当前数字的数字&lt;/h1&gt;&lt;p&gt;给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] &amp;lt; nums[i] 。以数组形式返回答案。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：nums = [8,1,2,2,3]&lt;br&gt;输出：[4,0,1,1,3]&lt;br&gt;解释：&lt;br&gt;对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。&lt;br&gt;对于 nums[1]=1 不存在比它小的数字。&lt;br&gt;对于 nums[2]=2 存在一个比它小的数字：（1）。&lt;br&gt;对于 nums[3]=2 存在一个比它小的数字：（1）。&lt;br&gt;对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 143.重排链表</title>
    <link href="https://l-roc.github.io/2020/10/20/leetcode-143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
    <id>https://l-roc.github.io/2020/10/20/leetcode-143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</id>
    <published>2020-10-20T15:34:19.000Z</published>
    <updated>2020-10-20T15:52:09.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-143-重排链表"><a href="#leetcode-143-重排链表" class="headerlink" title="leetcode 143.重排链表"></a>leetcode 143.重排链表</h1><p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，<br>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例 1:</p><blockquote><p>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</p></blockquote><p>示例 2:</p><blockquote><p>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reorder-list" target="_blank" rel="noopener">leetcode 143</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line"></span><br><span class="line">    ListNode() : val(<span class="number">0</span>), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    explicit ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 倒置单链表</span></span><br><span class="line"><span class="comment">     * @param list</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *<span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> preHead = make_unique&lt;ListNode&gt;();</span><br><span class="line">        ListNode *temp;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">list</span> != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            temp = <span class="built_in">list</span>;</span><br><span class="line">            <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">            temp-&gt;next = preHead-&gt;next;</span><br><span class="line">            preHead-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 合并两个单链表到第一个链表 eg: mergeList(1-&gt;2-&gt;3,6-&gt;7-&gt;8) = 1-&gt;6-&gt;2-&gt;7-&gt;8</span></span><br><span class="line"><span class="comment">     * @param list1</span></span><br><span class="line"><span class="comment">     * @param list2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode *<span class="title">mergeList</span><span class="params">(ListNode *list1,ListNode *list2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> preHead = make_unique&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">auto</span> tail = preHead.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">while</span>(list1 != <span class="literal">nullptr</span> &amp;&amp; list2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            tail-&gt;next = list1;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            list1 = list1-&gt;next;</span><br><span class="line">            tail-&gt;next = list2;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            list2 = list2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            tail-&gt;next = list1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tail-&gt;next = list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 给定一个单链表 L：L0→L1→…→Ln-1→Ln,将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</span></span><br><span class="line"><span class="comment">     * @param head</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">auto</span> preMid = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length / <span class="number">2</span>;i++)&#123;</span><br><span class="line">            preMid = preMid-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> mid = preMid-&gt;next;</span><br><span class="line">        preMid-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        mid = reverseList(mid);</span><br><span class="line">        mergeList(head, mid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 构建单链表</span></span><br><span class="line"><span class="comment"> * @param nums</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ListNode *<span class="title">buildList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> preHead = make_unique&lt;ListNode&gt;();</span><br><span class="line">    ListNode *tail = preHead.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">        tail-&gt;next = <span class="keyword">new</span> ListNode(num);</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 销毁单链表</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyList</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">auto</span> temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 输出单链表</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;head-&gt;val&lt;&lt;<span class="string">"-&gt;"</span>;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"null"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    ListNode *<span class="built_in">list</span> = buildList(nums);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    Solution solution;</span><br><span class="line">    solution.reorderList(<span class="built_in">list</span>);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    destroyList(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-143-重排链表&quot;&gt;&lt;a href=&quot;#leetcode-143-重排链表&quot; class=&quot;headerlink&quot; title=&quot;leetcode 143.重排链表&quot;&gt;&lt;/a&gt;leetcode 143.重排链表&lt;/h1&gt;&lt;p&gt;给定一个单链表 L：L0→L1→…→Ln-1→Ln ，&lt;br&gt;将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…&lt;br&gt;你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定链表 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 重新排列为 1-&amp;gt;4-&amp;gt;2-&amp;gt;3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定链表 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 重新排列为 1-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/reorder-list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 143&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 884.比较含退格的字符串</title>
    <link href="https://l-roc.github.io/2020/10/20/leetcode-884-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://l-roc.github.io/2020/10/20/leetcode-884-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-10-20T07:37:26.000Z</published>
    <updated>2020-10-20T15:52:21.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="884-比较含退格的字符串"><a href="#884-比较含退格的字符串" class="headerlink" title="884.比较含退格的字符串"></a>884.比较含退格的字符串</h1><p>给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。<br>注意：如果对空文本输入退格字符，文本继续为空。</p><p>示例 1：</p><blockquote><p>输入：S = “ab#c”, T = “ad#c”<br>输出：true<br>解释：S 和 T 都会变成 “ac”。</p></blockquote><p>示例 2：</p><blockquote><p>输入：S = “ab##”, T = “c#d#”<br>输出：true<br>解释：S 和 T 都会变成 “”。</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/backspace-string-compare" target="_blank" rel="noopener">leetcode.884</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 输入到空白文本编辑器，#代表退格符号</span></span><br><span class="line"><span class="comment">     * @param str 输入字符流 eg: str = "ab#c" --&gt; "ac"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inputToEditor</span><span class="params">(<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch:str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'#'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    index--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str[index] = ch;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.resize(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 判断两个字符串S,T分别输入到空白的文本编辑器</span></span><br><span class="line"><span class="comment">     * @param S eg: "ab#c" --&gt; "ac"</span></span><br><span class="line"><span class="comment">     * @param T eg: "ad#c" --&gt; "ac"</span></span><br><span class="line"><span class="comment">     * @return 两个字符串被输入到空白文本编辑器中，如果相等就返回true，否则返回false  eg: S和T输入到文本编辑器中的结果都为"ac"，所以返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        inputToEditor(S);</span><br><span class="line">        inputToEditor(T);</span><br><span class="line">        <span class="keyword">return</span> S == T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> S = <span class="string">"y#fo##f"</span>;</span><br><span class="line">    <span class="built_in">string</span> T = <span class="string">"y#f#o##f"</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution.backspaceCompare(S, T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;884-比较含退格的字符串&quot;&gt;&lt;a href=&quot;#884-比较含退格的字符串&quot; class=&quot;headerlink&quot; title=&quot;884.比较含退格的字符串&quot;&gt;&lt;/a&gt;884.比较含退格的字符串&lt;/h1&gt;&lt;p&gt;给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。&lt;br&gt;注意：如果对空文本输入退格字符，文本继续为空。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：S = “ab#c”, T = “ad#c”&lt;br&gt;输出：true&lt;br&gt;解释：S 和 T 都会变成 “ac”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：S = “ab##”, T = “c#d#”&lt;br&gt;输出：true&lt;br&gt;解释：S 和 T 都会变成 “”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/backspace-string-compare&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode.884&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 75.颜色分类</title>
    <link href="https://l-roc.github.io/2020/10/07/leetcode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://l-roc.github.io/2020/10/07/leetcode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</id>
    <published>2020-10-07T15:55:22.000Z</published>
    <updated>2020-10-20T15:52:02.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-75-颜色分类"><a href="#leetcode-75-颜色分类" class="headerlink" title="leetcode 75.颜色分类"></a>leetcode 75.颜色分类</h1><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。<br>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。<br>注意:<br>不能使用代码库中的排序函数来解决这道题。</p><p>示例:</p><blockquote><p>输入: [2,0,2,1,1,0]<br>输出: [0,0,1,1,2,2]</p></blockquote><p>进阶：</p><blockquote><p>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。<br>你能想出一个仅使用常数空间的一趟扫描算法吗？</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sort-colors" target="_blank" rel="noopener">leetcode 75</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 给定数组包含红、白、蓝三种颜色，对数组原地排序，按照红白蓝的顺序</span></span><br><span class="line"><span class="comment">     * @param nums 0,1,2分别表示红白蓝三种颜色 eg:&#123;2, 0, 2, 1, 1, 0&#125; 排序后应该为&#123;0,0,1,1,2,2&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] == <span class="number">2</span> &amp;&amp; i &lt;= right) &#123;</span><br><span class="line">                swap(nums[i], nums[right]);</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums[i], nums[left]);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNums</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    for_each(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), [](<span class="keyword">int</span> &amp;x) &#123; <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span>; &#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    Solution solution;</span><br><span class="line">    solution.sortColors(nums);</span><br><span class="line">    printNums(nums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-75-颜色分类&quot;&gt;&lt;a href=&quot;#leetcode-75-颜色分类&quot; class=&quot;headerlink&quot; title=&quot;leetcode 75.颜色分类&quot;&gt;&lt;/a&gt;leetcode 75.颜色分类&lt;/h1&gt;&lt;p&gt;给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;br&gt;此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;br&gt;注意:&lt;br&gt;不能使用代码库中的排序函数来解决这道题。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [2,0,2,1,1,0]&lt;br&gt;输出: [0,0,1,1,2,2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进阶：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个直观的解决方案是使用计数排序的两趟扫描算法。&lt;br&gt;首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。&lt;br&gt;你能想出一个仅使用常数空间的一趟扫描算法吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/sort-colors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 75&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 834.树中距离之和</title>
    <link href="https://l-roc.github.io/2020/10/07/leetcode-834-%E6%A0%91%E4%B8%AD%E8%B7%9D%E7%A6%BB%E4%B9%8B%E5%92%8C/"/>
    <id>https://l-roc.github.io/2020/10/07/leetcode-834-%E6%A0%91%E4%B8%AD%E8%B7%9D%E7%A6%BB%E4%B9%8B%E5%92%8C/</id>
    <published>2020-10-07T14:53:47.000Z</published>
    <updated>2020-10-20T15:52:17.781Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tree;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 给N个结点，N-1条边，计算每个结点到其他结点的距离之和</span></span><br><span class="line"><span class="comment">     * @param N 结点数目    eg:6</span></span><br><span class="line"><span class="comment">     * @param edges 边   eg:&#123;&#123;0, 1&#125;,&#123;0, 2&#125;,&#123;2, 3&#125;,&#123;2, 4&#125;,&#123;2, 5&#125;&#125;</span></span><br><span class="line"><span class="comment">     * @return  eg:&#123;8,12,6,10,10,10&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sumOfDistancesInTree(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;edges) &#123;</span><br><span class="line">        ans = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>);</span><br><span class="line">        count = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">1</span>);</span><br><span class="line">        tree = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">this</span>-&gt;N = N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge:edges) &#123;</span><br><span class="line">            tree[edge[<span class="number">0</span>]].push_back(edge[<span class="number">1</span>]);</span><br><span class="line">            tree[edge[<span class="number">1</span>]].push_back(edge[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        postOrder(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        preOrder(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 后序遍历计算根结点到所有其他结点距离之和</span></span><br><span class="line"><span class="comment">     * @param cur 当前结点</span></span><br><span class="line"><span class="comment">     * @param parent 当前结点的父结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> child:tree[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child != parent) &#123;</span><br><span class="line">                postOrder(child, cur);</span><br><span class="line">                count[cur] += count[child];</span><br><span class="line">                ans[cur] += ans[child] + count[child];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder_1</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        st.push(cur);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            tree[cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 先序遍历计算当前结点的子结点到其他所有结点距离之和</span></span><br><span class="line"><span class="comment">     * @param cur 当前结点</span></span><br><span class="line"><span class="comment">     * @param parent 当前结点的父结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;child:tree[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child != parent) &#123;</span><br><span class="line">                ans[child] = ans[cur] + (N - count[child]) - count[child];</span><br><span class="line">                preOrder(child, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">2</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">2</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">6</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.sumOfDistancesInTree(N, edges);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 18.四数之和</title>
    <link href="https://l-roc.github.io/2020/10/05/leetcode-18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://l-roc.github.io/2020/10/05/leetcode-18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2020-10-05T10:21:39.000Z</published>
    <updated>2020-10-20T15:51:59.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-18-四数之和"><a href="#leetcode-18-四数之和" class="headerlink" title="leetcode 18.四数之和"></a>leetcode 18.四数之和</h1><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p>注意：</p><blockquote><p>答案中不可以包含重复的四元组。</p></blockquote><p>示例：</p><blockquote><p>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。<br>满足要求的四元组集合为：<br>[<br>   [-1,  0, 0, 1],<br>   [-2, -1, 1, 2],<br>   [-2,  0, 0, 2]<br>]</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener">leetcode 18</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 求数组中四个数之和为target的所有不同四元组</span></span><br><span class="line"><span class="comment">     * @param nums  eg:&#123;5,5,3,5,1,-5,1,-2&#125;</span></span><br><span class="line"><span class="comment">     * @param target 四数之和的目标值   eg:4</span></span><br><span class="line"><span class="comment">     * @return 符合条件的所有四元组   eg:&#123;&#123;-5,1,3,5&#125;&#125; (-5+1+3+5刚好等于4)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="built_in">size</span> - <span class="number">3</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a - <span class="number">1</span>]) <span class="keyword">continue</span>;<span class="comment">//保证nums[a]与之前不一样</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = a + <span class="number">1</span>; b &lt; <span class="built_in">size</span> - <span class="number">2</span>; b++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b &gt; a + <span class="number">1</span> &amp;&amp; nums[b] == nums[b - <span class="number">1</span>]) <span class="keyword">continue</span>;<span class="comment">//确保nums[b]与之前不一样</span></span><br><span class="line">                <span class="keyword">int</span> c = b + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> d = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (c &lt; d) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[a] + nums[b] + nums[c] + nums[d];</span><br><span class="line">                    <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        c++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                        d--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.push_back(&#123;nums[a], nums[b], nums[c], nums[d]&#125;);</span><br><span class="line">                        c++;</span><br><span class="line">                        <span class="comment">//保证nums[c]与之前不一样</span></span><br><span class="line">                        <span class="keyword">while</span> (c &lt; d &amp;&amp; nums[c] == nums[c - <span class="number">1</span>]) &#123;</span><br><span class="line">                            c++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        d--;</span><br><span class="line">                        <span class="comment">//保证nums[d]与之前不一样</span></span><br><span class="line">                        <span class="keyword">while</span> (c &lt; d &amp;&amp; nums[d] == nums[d + <span class="number">1</span>]) &#123;</span><br><span class="line">                            d--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 同fourSum，增加了减枝以加快效率</span></span><br><span class="line"><span class="comment">     * @param nums</span></span><br><span class="line"><span class="comment">     * @param target</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum_1(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="built_in">size</span> - <span class="number">3</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a - <span class="number">1</span>]) <span class="keyword">continue</span>;      <span class="comment">//保证nums[a]与之前不一样</span></span><br><span class="line">            <span class="keyword">if</span> (nums[a] + nums[<span class="built_in">size</span><span class="number">-3</span>] + nums[<span class="built_in">size</span><span class="number">-2</span>] + nums[<span class="built_in">size</span><span class="number">-1</span>] &lt; target)  <span class="keyword">continue</span>;   <span class="comment">//nums[a]与最大的三个数相加小于target，第一个数应该更大</span></span><br><span class="line">            <span class="keyword">if</span> (nums[a] + nums[a+<span class="number">1</span>] + nums[a+<span class="number">2</span>] + nums[a+<span class="number">3</span>] &gt; target) <span class="keyword">break</span>;    <span class="comment">//如果当前的最小四个数都大于target说明没有更多的解</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = a + <span class="number">1</span>; b &lt; <span class="built_in">size</span> - <span class="number">2</span>; b++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b &gt; a + <span class="number">1</span> &amp;&amp; nums[b] == nums[b - <span class="number">1</span>]) <span class="keyword">continue</span>;<span class="comment">//确保nums[b]与之前不一样</span></span><br><span class="line">                <span class="keyword">if</span>(nums[a] +nums[b] + nums[<span class="built_in">size</span><span class="number">-2</span>] + nums[<span class="built_in">size</span><span class="number">-1</span>] &lt; target) <span class="keyword">continue</span>;   <span class="comment">//确定的两个数和最大两个数相加小于target</span></span><br><span class="line">                <span class="keyword">if</span> (nums[a] + nums[b] + nums[b+<span class="number">1</span>] + nums[b+<span class="number">2</span>] &gt; target) <span class="keyword">break</span>;          <span class="comment">//确定的两个数和最小两个数相加大于target</span></span><br><span class="line">                <span class="keyword">int</span> c = b + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> d = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (c &lt; d) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[a] + nums[b] + nums[c] + nums[d];</span><br><span class="line">                    <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        c++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                        d--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.push_back(&#123;nums[a], nums[b], nums[c], nums[d]&#125;);</span><br><span class="line">                        c++;</span><br><span class="line">                        <span class="keyword">while</span> (c &lt; d &amp;&amp; nums[c] == nums[c - <span class="number">1</span>]) &#123;</span><br><span class="line">                            c++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        d--;</span><br><span class="line">                        <span class="keyword">while</span> (c &lt; d &amp;&amp; nums[d] == nums[d + <span class="number">1</span>]) &#123;</span><br><span class="line">                            d--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">1</span>, <span class="number">-2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> target = <span class="number">4</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.fourSum_1(nums, target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;nums:result) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;num:nums) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-18-四数之和&quot;&gt;&lt;a href=&quot;#leetcode-18-四数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode 18.四数之和&quot;&gt;&lt;/a&gt;leetcode 18.四数之和&lt;/h1&gt;&lt;p&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答案中不可以包含重复的四元组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。&lt;br&gt;满足要求的四元组集合为：&lt;br&gt;[&lt;br&gt;   [-1,  0, 0, 1],&lt;br&gt;   [-2, -1, 1, 2],&lt;br&gt;   [-2,  0, 0, 2]&lt;br&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/4sum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 18&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 2.两数相加</title>
    <link href="https://l-roc.github.io/2020/10/04/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://l-roc.github.io/2020/10/04/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2020-10-03T16:49:13.000Z</published>
    <updated>2020-10-03T17:21:11.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2-两数相加"><a href="#leetcode-2-两数相加" class="headerlink" title="leetcode 2.两数相加"></a>leetcode 2.两数相加</h1><p>给出两个<strong>非空</strong>的链表用来表示两个非负的整数。其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且它们的每个节点只能存储<strong>一位</strong>数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">leetcode 2</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line"></span><br><span class="line">    explicit ListNode(int value) : val(value), next(nullptr) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">addTwoNumbers</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> *head = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> || l2 != <span class="literal">nullptr</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> val1 = (l1 == <span class="literal">nullptr</span> ? <span class="number">0</span> : l1-&gt;val);</span><br><span class="line">            <span class="keyword">int</span> val2 = (l2 == <span class="literal">nullptr</span> ? <span class="number">0</span> : l2-&gt;val);</span><br><span class="line">            sum = val1 + val2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                sum -= <span class="number">10</span>;</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">buildList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *head = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    ListNode *tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:values) &#123;</span><br><span class="line">        tail-&gt;next = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(ListNode *<span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span> != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">list</span>-&gt;val &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values1&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values2&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> l1 = buildList(values1);</span><br><span class="line">    <span class="keyword">auto</span> l2 = buildList(values2);</span><br><span class="line">    printList(l1);</span><br><span class="line">    printList(l2);</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.addTwoNumbers(l1, l2);</span><br><span class="line">    printList(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-2-两数相加&quot;&gt;&lt;a href=&quot;#leetcode-2-两数相加&quot; class=&quot;headerlink&quot; title=&quot;leetcode 2.两数相加&quot;&gt;&lt;/a&gt;leetcode 2.两数相加&lt;/h1&gt;&lt;p&gt;给出两个&lt;strong&gt;非空&lt;/strong&gt;的链表用来表示两个非负的整数。其中，它们各自的位数是按照&lt;strong&gt;逆序&lt;/strong&gt;的方式存储的，并且它们的每个节点只能存储&lt;strong&gt;一位&lt;/strong&gt;数字。&lt;br&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;br&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;br&gt;输出：7 -&amp;gt; 0 -&amp;gt; 8&lt;br&gt;原因：342 + 465 = 807&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 2&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 771.宝石与石头</title>
    <link href="https://l-roc.github.io/2020/10/02/leetcode-771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/"/>
    <id>https://l-roc.github.io/2020/10/02/leetcode-771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/</id>
    <published>2020-10-02T08:03:47.000Z</published>
    <updated>2020-10-03T17:11:22.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-771-宝石与石头"><a href="#leetcode-771-宝石与石头" class="headerlink" title="leetcode 771.宝石与石头"></a>leetcode 771.宝石与石头</h1><p> 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。<br> J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/jewels-and-stones" target="_blank" rel="noopener">leetcode 771</a></p><p>示例 1:</p><blockquote><p>输入: J = “aA”, S = “aAAbbbb”<br>输出: 3</p></blockquote><p>示例 2:</p><blockquote><p>输入: J = “z”, S = “ZZ”<br>输出: 0</p></blockquote><p>注意:</p><blockquote><p>S 和 J 最多含有50个字母。<br>J 中的字符不重复。</p></blockquote><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief leetcode-771-宝石与石头</span></span><br><span class="line"><span class="comment">     * @param J 石头中宝石的类型    eg:"aA"</span></span><br><span class="line"><span class="comment">     * @param S 拥有的石头   eg:"aAAbbbb"</span></span><br><span class="line"><span class="comment">     * @return 拥有的石头中为宝石的数目 eg:3 (aAA总共三个宝石）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; hashSet;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:J) &#123;</span><br><span class="line">            hashSet.insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:S) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashSet.<span class="built_in">find</span>(i) != hashSet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> J=<span class="string">"aA"</span>;</span><br><span class="line">    <span class="built_in">string</span> S=<span class="string">"aAAbbbb"</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution.numJewelsInStones(J,S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-771-宝石与石头&quot;&gt;&lt;a href=&quot;#leetcode-771-宝石与石头&quot; class=&quot;headerlink&quot; title=&quot;leetcode 771.宝石与石头&quot;&gt;&lt;/a&gt;leetcode 771.宝石与石头&lt;/h1&gt;&lt;p&gt; 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。&lt;br&gt; J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/jewels-and-stones&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 771&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: J = “aA”, S = “aAAbbbb”&lt;br&gt;输出: 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: J = “z”, S = “ZZ”&lt;br&gt;输出: 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;S 和 J 最多含有50个字母。&lt;br&gt;J 中的字符不重复。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode LCP19.秋叶收藏集</title>
    <link href="https://l-roc.github.io/2020/10/01/leetcode-LCP19-%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86/"/>
    <id>https://l-roc.github.io/2020/10/01/leetcode-LCP19-%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86/</id>
    <published>2020-10-01T14:27:33.000Z</published>
    <updated>2020-10-03T17:10:28.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-LCP19-秋叶收藏集"><a href="#leetcode-LCP19-秋叶收藏集" class="headerlink" title="leetcode LCP19.秋叶收藏集"></a>leetcode LCP19.秋叶收藏集</h1><p>​        小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。</p><p>​        出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/UlBDOe" target="_blank" rel="noopener">leetcode LCP19</a></p><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief LCP 19.秋叶收藏集  时间复杂度：O(n)  空间复杂度：O(n)</span></span><br><span class="line"><span class="comment">     * @param leaves eg:"rrryyyrryyyrr" r:代表红叶 y：代表黄叶</span></span><br><span class="line"><span class="comment">     * @return eg:2 将中间两个rr替换为y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumOperations</span><span class="params">(<span class="built_in">string</span> leaves)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(leaves.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = (leaves[<span class="number">0</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">0</span>] + (leaves[<span class="number">1</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">0</span>] + (leaves[<span class="number">1</span>] == <span class="string">'r'</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">2</span>] = INT_MAX;</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">0</span>] + (leaves[<span class="number">2</span>] == <span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>], dp[<span class="number">1</span>][<span class="number">1</span>]) + (leaves[<span class="number">2</span>] == <span class="string">'r'</span>);</span><br><span class="line">        dp[<span class="number">2</span>][<span class="number">2</span>] = dp[<span class="number">1</span>][<span class="number">1</span>] + (leaves[<span class="number">2</span>] == <span class="string">'y'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; leaves.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + (leaves[i] == <span class="string">'r'</span>);</span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[leaves.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 同minimumOperations函数，通过降维优化了空间复杂度     时间复杂度：O(n)  空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">     * @param leaves</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumOperations1</span><span class="params">(<span class="built_in">string</span> leaves)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>]= (leaves[<span class="number">0</span>]==<span class="string">'y'</span>);</span><br><span class="line">        dp[<span class="number">1</span>]=INT_MAX;</span><br><span class="line">        dp[<span class="number">2</span>]=INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; leaves.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">1</span>)</span><br><span class="line">                dp[<span class="number">2</span>] = <span class="built_in">min</span>(dp[<span class="number">1</span>], dp[<span class="number">2</span>]) + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">min</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]) + (leaves[i] == <span class="string">'r'</span>);</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">0</span>] + (leaves[i] == <span class="string">'y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> leaves = <span class="string">"rrryyyrryyyrr"</span>;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution.minimumOperations(leaves);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-LCP19-秋叶收藏集&quot;&gt;&lt;a href=&quot;#leetcode-LCP19-秋叶收藏集&quot; class=&quot;headerlink&quot; title=&quot;leetcode LCP19.秋叶收藏集&quot;&gt;&lt;/a&gt;leetcode LCP19.秋叶收藏集&lt;/h1&gt;&lt;p&gt;​        小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。&lt;/p&gt;
&lt;p&gt;​        出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/UlBDOe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode LCP19&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 145.二叉树的后序遍历（非递归）</title>
    <link href="https://l-roc.github.io/2020/09/29/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>https://l-roc.github.io/2020/09/29/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</id>
    <published>2020-09-29T15:37:52.000Z</published>
    <updated>2020-10-03T17:26:40.171Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉树，返回它的 后序 遍历。</p><p>示例:</p><blockquote><p>输入: [1,null,2,3]  </p></blockquote><pre><code>1 \  2 /3 </code></pre><blockquote><p>输出: [3,2,1]<br>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">leetcode 145</a></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 二叉树递归后序遍历</span></span><br><span class="line"><span class="comment">     * @param root 二叉树根结点</span></span><br><span class="line"><span class="comment">     * @return 遍历结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal1(TreeNode *root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            postorderTraversal1(root-&gt;left);</span><br><span class="line">            postorderTraversal1(root-&gt;right);</span><br><span class="line">            result.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 二叉树非递归后序遍历</span></span><br><span class="line"><span class="comment">     * @param root 二叉树根结点指针</span></span><br><span class="line"><span class="comment">     * @return  后序遍历结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal2(TreeNode *root) &#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        TreeNode *pre;</span><br><span class="line">        result.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123; st.push(root); &#125;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            <span class="keyword">if</span> ((cur-&gt;left == <span class="literal">nullptr</span> &amp;&amp; cur-&gt;right == <span class="literal">nullptr</span>) ||</span><br><span class="line">                pre == cur-&gt;left || pre == cur-&gt;right) &#123;</span><br><span class="line">                <span class="comment">// 当前结点没有左右子结点</span></span><br><span class="line">                <span class="comment">// 上一个遍历的结点为当前结点的左或右子结点（即当前结点表示当前结点，并不代表树）</span></span><br><span class="line">                result.push_back(cur-&gt;val);</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当前结点有左或右结点 而且上一个遍历的结点并不是当前结点的子结点（即当前结点表示以当前结点为根结点的树）</span></span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">                    st.push(cur-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">                    st.push(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 通过层序遍历创建二叉树</span></span><br><span class="line"><span class="comment"> * @param nums 层序遍历结果，-1表示结点为空，最后的-1可以去除 eg：&#123;1,-1,3,2,-1&#125;可以写为&#123;1,-1,3,2&#125;</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;TreeNode *&gt; qu;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">    TreeNode *cur = <span class="literal">nullptr</span>;</span><br><span class="line">    qu.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!qu.empty() &amp;&amp; i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        cur = qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;left = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">                qu.push(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;right = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">                qu.push(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    TreeNode *root = buildTree(nums);</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.postorderTraversal2(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二叉树，返回它的 后序 遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [1,null,2,3]  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1
 \
  2
 /
3 &lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;输出: [3,2,1]&lt;br&gt;进阶: 递归算法很简单，你可以通过迭代算法完成吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-postorder-traversal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 145&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 235.二叉搜索树的最近公共祖先</title>
    <link href="https://l-roc.github.io/2020/09/27/leetcode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://l-roc.github.io/2020/09/27/leetcode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2020-09-27T07:39:31.000Z</published>
    <updated>2020-10-03T17:48:40.395Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。<br>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt="img"></p><p>示例 1:</p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p></blockquote><p>示例 2:</p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>输出: 2<br>解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</p></blockquote><p>说明:</p><blockquote><p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉搜索树中。</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree" target="_blank" rel="noopener">leetcode 235</a></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 在二叉搜索树中查找两个结点的最近公共祖先（所有的结点的值都是唯一的，p和q为不同结点并且都存在二叉树中）</span></span><br><span class="line"><span class="comment">     * @param root 二叉树搜索树根结点</span></span><br><span class="line"><span class="comment">     * @param p 结点1</span></span><br><span class="line"><span class="comment">     * @param q 结点2</span></span><br><span class="line"><span class="comment">     * @return 最近公共祖先</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">lowestCommonAncestor</span><span class="params">(TreeNode *root, TreeNode *p, TreeNode *q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) &#123;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) &#123;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTreeHelper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.<span class="built_in">size</span>() || nums[index] == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(nums[index]);</span><br><span class="line">    root-&gt;left = buildTreeHelper(nums, index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    root-&gt;right = buildTreeHelper(nums, index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> buildTreeHelper(nums, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    TreeNode *root = buildTree(nums);</span><br><span class="line">    TreeNode *p = root-&gt;left;</span><br><span class="line">    TreeNode *q = p-&gt;right;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="keyword">auto</span> result = solution.lowestCommonAncestor(root, p, q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result-&gt;val;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。&lt;br&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”&lt;br&gt;例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8&lt;br&gt;输出: 6&lt;br&gt;解释: 节点 2 和节点 8 的最近公共祖先是 6。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4&lt;br&gt;输出: 2&lt;br&gt;解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有节点的值都是唯一的。&lt;br&gt;p、q 为不同节点且均存在于给定的二叉搜索树中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode 235&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 106.从中序与后序遍历构造二叉树</title>
    <link href="https://l-roc.github.io/2020/09/26/leetcode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://l-roc.github.io/2020/09/26/leetcode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-09-25T16:27:16.000Z</published>
    <updated>2020-10-03T17:50:31.894Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line"></span><br><span class="line">    explicit TreeNode(int value) : val(value), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 用于递归的辅助函数</span></span><br><span class="line"><span class="comment">     * @param inorder 前序遍历数组</span></span><br><span class="line"><span class="comment">     * @param i 前序遍历开始的下标</span></span><br><span class="line"><span class="comment">     * @param postorder 中序遍历数组</span></span><br><span class="line"><span class="comment">     * @param j 中序遍历开始下标</span></span><br><span class="line"><span class="comment">     * @param n 总共结点数</span></span><br><span class="line"><span class="comment">     * @return 返回构建二叉树的根结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;postorder, <span class="keyword">int</span> j, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || j + n - <span class="number">1</span> &lt; <span class="number">0</span> || j + n - <span class="number">1</span> &gt;= inorder.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">int</span> rootVal = postorder[j + n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">auto</span> root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">        <span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">while</span> (inorder[k] != rootVal) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = helper(inorder, i, postorder, j, k - i);</span><br><span class="line">        root-&gt;right = helper(inorder, k + <span class="number">1</span>, postorder, j + k - i, n - (k - i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 根据前序和中序遍历结果构造二叉树</span></span><br><span class="line"><span class="comment">     * @param inorder 前序遍历</span></span><br><span class="line"><span class="comment">     * @param postorder 中序遍历</span></span><br><span class="line"><span class="comment">     * @return 构造的二叉树根结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(inorder, <span class="number">0</span>, postorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 前序遍历</span></span><br><span class="line"><span class="comment"> * @param root 二叉树根结点</span></span><br><span class="line"><span class="comment"> * @param result 前序遍历结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;left, result);</span><br><span class="line">    result.push_back(root-&gt;val);</span><br><span class="line">    inOrder(root-&gt;right, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorder&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorder&#123;<span class="number">9</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    Solution solution;</span><br><span class="line">    TreeNode *root = solution.buildTree(inorder, postorder);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    inOrder(root, result);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:result) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/tags/leetcode/"/>
    
      <category term="C++" scheme="https://l-roc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java中的Object类</title>
    <link href="https://l-roc.github.io/2020/09/23/Object%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>https://l-roc.github.io/2020/09/23/Object%E7%B1%BB%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-22T16:15:00.178Z</published>
    <updated>2020-10-03T17:02:00.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-getClass"><a href="#1-getClass" class="headerlink" title="1.getClass()"></a>1.getClass()</h1><pre><code>public finalreturn:Class&lt;?&gt;</code></pre><h1 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2.hashCode()"></a>2.hashCode()</h1><pre><code>publicreturn:int</code></pre><h1 id="3-equals-Object-obj"><a href="#3-equals-Object-obj" class="headerlink" title="3.equals(Object obj)"></a>3.equals(Object obj)</h1><pre><code>publicreturn:boolean</code></pre><h1 id="4-clone"><a href="#4-clone" class="headerlink" title="4.clone()"></a>4.clone()</h1><pre><code>protectedthrows:CloneNotSupportedExceptionreturn:Object</code></pre><h1 id="5-toString"><a href="#5-toString" class="headerlink" title="5.toString()"></a>5.toString()</h1><pre><code>publicreturn:String</code></pre><h1 id="6-notify"><a href="#6-notify" class="headerlink" title="6.notify()"></a>6.notify()</h1><pre><code>public finalreturn:void</code></pre><h1 id="7-notifyAll"><a href="#7-notifyAll" class="headerlink" title="7.notifyAll()"></a>7.notifyAll()</h1><pre><code>public finalreturn:void</code></pre><h1 id="8-wait"><a href="#8-wait" class="headerlink" title="8.wait()"></a>8.wait()</h1><pre><code>public finalreturn:voidthrows:InterruptedException </code></pre><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-getClass&quot;&gt;&lt;a href=&quot;#1-getClass&quot; class=&quot;headerlink&quot; title=&quot;1.getClass()&quot;&gt;&lt;/a&gt;1.getClass()&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;public final
return:Class&amp;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://l-roc.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://l-roc.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="https://l-roc.github.io/2019/12/28/test/"/>
    <id>https://l-roc.github.io/2019/12/28/test/</id>
    <published>2019-12-28T15:36:12.718Z</published>
    <updated>2019-12-28T15:36:12.718Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test docment.</p><a id="more"></a><h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><h2 id="a-url-roc’s-github"><a href="#a-url-roc’s-github" class="headerlink" title="a url roc’s github"></a>a url <a href="https://github.com/l-roc" target="_blank" rel="noopener">roc’s github</a></h2><p>test test<br>test</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a test docment.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="test" scheme="https://l-roc.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://l-roc.github.io/2019/11/14/hello-world/"/>
    <id>https://l-roc.github.io/2019/11/14/hello-world/</id>
    <published>2019-11-14T09:07:21.179Z</published>
    <updated>2020-10-20T15:52:27.525Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://l-roc.github.io/categories/leetcode/"/>
    
    
      <category term="hello world!" scheme="https://l-roc.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
